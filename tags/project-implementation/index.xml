<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Project implementation on SDN-Cloudstack - Documentation</title><link>/tags/project-implementation/</link><description>Recent content in Project implementation on SDN-Cloudstack - Documentation</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><lastBuildDate>Thu, 21 Oct 2021 17:35:34 +0200</lastBuildDate><atom:link href="/tags/project-implementation/index.xml" rel="self" type="application/rss+xml"/><item><title>Web Portal</title><link>/rapport/content/project_realisation/web_portal/</link><pubDate>Thu, 21 Oct 2021 17:35:34 +0200</pubDate><guid>/rapport/content/project_realisation/web_portal/</guid><description>The web portal is the part in contact with the user. It must allow the user to interact with the system. This web portal is composed of several parts:
Server part: Flask This part is the one that runs on the server. It manages the HTTP requests generated by the user. This means that the user can access pages, which are generated by the server. The server that provides the web portal is called Werkzeug.</description></item><item><title>Software interface settings</title><link>/rapport/content/project_realisation/software_interface_setting/</link><pubDate>Thu, 21 Oct 2021 17:35:34 +0200</pubDate><guid>/rapport/content/project_realisation/software_interface_setting/</guid><description>The software configuration interface is a service allowing the configuration of network assets.
Why this interface? First of all, it is important to know how the network assets are configured. We saw in the previous section that it was assumed that we would not use interactive protocols such as the Console port or SSH (Console over Network). So we had to find other ways. We decided to use a well-known protocol in the field of supervision: the SNMP protocol.</description></item><item><title>Database</title><link>/rapport/content/project_realisation/database/</link><pubDate>Thu, 21 Oct 2021 17:35:34 +0200</pubDate><guid>/rapport/content/project_realisation/database/</guid><description>Topology structure Topologies are stored as strings in YAML format. The structure of this string is simple, it is composed of 4 parts:
name : the name of the topology -&amp;gt; used to identify the topology instead of its ID, too heavy for the user vlans : the list of VLANs useful for the topology application, to be created if necessary interfaces : the list of interfaces configurations of the topology trunks: the list of trunk configurations of the topology An example of topology is proposed in appendix 5</description></item><item><title>Topologie manager</title><link>/rapport/content/project_realisation/topologie_manager/</link><pubDate>Thu, 21 Oct 2021 17:35:34 +0200</pubDate><guid>/rapport/content/project_realisation/topologie_manager/</guid><description>The topology manager is the central element of our project. It is the link between the user via the web interface, and the network agents via the API. It is the equivalent of the controller, in the MVC (Model-View-Controller) programming models.
Interactions First of all, the user must connect to the web interface. He therefore goes to the home page of the web portal. There he finds a button that allows him to connect.</description></item></channel></rss>