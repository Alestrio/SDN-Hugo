<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>notice on SDN-Cloudstack - Documentation</title><link>/en/tags/notice/</link><description>Recent content in notice on SDN-Cloudstack - Documentation</description><generator>Hugo -- gohugo.io</generator><language>fr</language><lastBuildDate>Tue, 21 Dec 2021 18:17:10 +0000</lastBuildDate><atom:link href="/en/tags/notice/index.xml" rel="self" type="application/rss+xml"/><item><title>Google Artifact Registry</title><link>/en/technique/deployment/google-ar/</link><pubDate>Tue, 21 Dec 2021 18:17:10 +0000</pubDate><guid>/en/technique/deployment/google-ar/</guid><description>Originally, the Docker image hosting was done on DockerHub, which offers hosting of ONE private Docker image. Our project requires at least two, so we had to find other solutions.
Google Cloud Platform And it is in our research that we discovered Google Cloud Platform, also called &amp;ldquo;GCP&amp;rdquo;. This set of cloud tools signed by Google offers a Docker container hosting service called Google Artifact Registry, and offers a trial offer including $300 for 90 days.</description></item><item><title>API Deployment</title><link>/en/technique/deployment/deployment/</link><pubDate>Sun, 17 Oct 2021 12:42:10 +0000</pubDate><guid>/en/technique/deployment/deployment/</guid><description>Prerequisites We have seen in the config part that the deployment of our API on DockerHub is automated thanks to a GithubRunner. So we will use the generated docker image to declare new instances of our API.
Docker-Compose Here is an example of the API instantiation configuration on Docker-Compose:
api_r1: image: alestrio/sdn-cloudstack # Base image name ports: - &amp;#34;8064:8000&amp;#34; # Port exposure (soon deprecated, see proxy..... part) volumes: - /home/user/compose/api/r1/config.</description></item><item><title>Api Url List</title><link>/en/technique/api/api_url_list/</link><pubDate>Sun, 17 Oct 2021 12:42:10 +0000</pubDate><guid>/en/technique/api/api_url_list/</guid><description>Liste of fonction needed for the API and the corresponding URL.
GET General Section Action URL get running config /api/v1/running-config Vlan Section Action URL get all vlan list /api/v1/vlan/all get specific vlan info by id /api/v1/vlan/{vlan_id} get specific vlan info by name /api/v1/vlan/{vlan_name} get specific vlan interface member by id /api/v1/vlan/{vlan_id}/interface get specific vlan interface member by name /api/v1/vlan/{vlan_name}/interface Interface Section Action URL get all interface list /api/v1/interface/all get inerface neighbor /api/v1/interface/neighbor get specific interface info by id /api/v1/interface/{interface_id} get all interface @IP /api/v1/interface/all/ip get specific interface @IP /api/v1/interface/{interface_id}/ip get all interface status /api/v1/interface/all/status get specific interface status /api/v1/interface/{interface_id}/status Switch Section Action URL get specific switch property /api/v1/switch/{switch_id} get the vlan list of a specific switch /api/v1/switch/{switch_id}/vlan SET General Section Action URL set new running config /api/v1/running-config/{config_id} Vlan Section Action URL Interface Section Action URL set all interface mode /api/v1/interface/all/{mode} set specific interface mode /api/v1/interface/{interface_id}/{mode} set all interface to vlan /api/v1/interface/all/{vlan_id} set specific interface to vlan /api/v1/interface/{interface_id}/{vlan_id}</description></item><item><title>CI/CD : Continuous Integration / Continuous Developpement</title><link>/en/technique/deployment/cicd/</link><pubDate>Sun, 17 Oct 2021 12:42:10 +0000</pubDate><guid>/en/technique/deployment/cicd/</guid><description>This article is about the CI/CD we are applying for our project.
Documentation We use Github to store the sources of the documentation (this website). So, to deploy new versions, we decided to use a CI/CD. CI/CD stands for Continuous Integration / Continuous Development, and allows to automate the testing and the deployment part of a project.
First of all, we have to configure the hosting machine. Since our site is self-hosted, we are going to use what is called a &amp;ldquo;self-hosted github runner&amp;rdquo;, whose documentation can be found here: https://docs.</description></item><item><title>SNMP/API link</title><link>/en/technique/api/link_snmp/</link><pubDate>Sun, 17 Oct 2021 12:42:10 +0000</pubDate><guid>/en/technique/api/link_snmp/</guid><description>To communicate with the assets, the API uses the SNMP protocol. You can find more information about the protocol on the dedicated research page. This article discusses the use of this protocol with the API.
Basic libraries: Initially, to design our API, we used PySNMP. It is a high level library entirely made with Python allowing to use the SNMP protocol with the Python language.
It is possible to do any SNMP action with this library, however, it has several drawbacks:</description></item></channel></rss>